import <%= resourceNamePascal %> from '../models/<%= resourceNameSingular %>.model.js';
import catchAsync from '../utils/catchAsync.js';

// <%= resourceNamePascal %>Controller maneja las operaciones CRUD para los recursos.
class <%= resourceNamePascal %>Controller {

    // getAll recupera todos los recursos.
    getAll = catchAsync(async (req, res) => {
        const data = await <%= resourceNamePascal %>.find({});
        res.status(200).json(data);
    });

    // getById recupera un recurso por su ID.
    getById = catchAsync(async (req, res) => {
        const data = await <%= resourceNamePascal %>.findById(req.params.id);
        if (data) {
            res.status(200).json(data);
        } else {
            res.status(404).json({ message: 'Recurso no encontrado' });
        }
    });

    // create crea un nuevo recurso.
    create = catchAsync(async (req, res) => {
        const newData = new <%= resourceNamePascal %>(req.body);
        const savedData = await newData.save();
        res.status(201).json(savedData);
    });

    // update actualiza un recurso existente por su ID.
    update = catchAsync(async (req, res) => {
        const updatedData = await <%= resourceNamePascal %>.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (updatedData) {
            res.status(200).json(updatedData);
        } else {
            res.status(404).json({ message: 'Recurso no encontrado' });
        }
    });

    // delete elimina un recurso por su ID.
    delete = catchAsync(async (req, res) => {
        const deletedData = await <%= resourceNamePascal %>.findByIdAndDelete(req.params.id);
        if (deletedData) {
            res.status(200).json({ message: 'Recurso eliminado exitosamente' });
        } else {
            res.status(404).json({ message: 'Recurso no encontrado' });
        }
    });
}

// Exporta una Ãºnica instancia del controlador para mantener la consistencia.
export default new <%= resourceNamePascal %>Controller();
