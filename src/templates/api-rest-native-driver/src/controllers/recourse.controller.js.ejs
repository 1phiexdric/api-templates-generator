import <%= resourceNamePascal %>Model from "../models/<%= resourceNameSingular %>.model.js";

// <%= resourceNamePascal %>Controller maneja las operaciones CRUD para los recursos.
class <%= resourceNamePascal %>Controller {

    // create crea un nuevo recurso.
    async create(req, res) {
        try {
            const data = await <%= resourceNamePascal %>Model.create(req.body);
            res.status(201).json(data);
        } catch (e) {
            res.status(500).send(e.message);
        }
    }

    // update actualiza un recurso existente.
    async update(req, res) {
        try {
            const id = req.params.id;
            const data = await <%= resourceNamePascal %>Model.update(id, req.body);
            res.status(200).json(data);
        } catch (e) {
            res.status(500).send(e.message);
        }
    }

    // replace reemplaza un recurso existente.
    async replace(req, res) {
        try {
            const id = req.params.id;
            const data = await <%= resourceNamePascal %>Model.replace(id, req.body);
            res.status(200).json(data);
        } catch (e) {
            res.status(500).send(e.message);
        }
    }

    // delete elimina un recurso.
    async delete(req, res) {
        try {
            const id = req.params.id;
            const data = await <%= resourceNamePascal %>Model.delete(id);
            res.status(200).json(data);
        } catch (e) {
            res.status(500).send(e.message);
        }
    }

    // getAll obtiene todos los recursos.
    async getAll(req, res) {
        try {
            const data = await <%= resourceNamePascal %>Model.getAll();
            res.status(200).send(data);
        } catch (e) {
            res.status(500).send(e.message);
        }
    }

    // getOne obtiene un recurso por su ID.
    async getOne(req, res) {
        try {
            const id = req.params.id;
            const data = await <%= resourceNamePascal %>Model.getOne(id);
            if (data) {
                res.status(200).send(data);
            } else {
                res.status(404).send({ "message": "Recurso no encontrado" });
            }
        } catch (e) {
            res.status(500).send(e.message);
        }
    }
}

// Exporta una Ãºnica instancia del controlador.
export default new <%= resourceNamePascal %>Controller();

