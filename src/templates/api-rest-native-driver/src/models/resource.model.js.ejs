import dbclient from "../config/dbclient.js";
import { ObjectId } from "mongodb";

// <%= resourceNamePascal %>Models maneja las operaciones de base de datos para los recursos.
class <%= resourceNamePascal %>Models {
    
    // getCollection obtiene la colección de la base de datos.
    getCollection() {
        return dbclient.db.collection('<%= resourceNamePlural %>');
    }

    // create inserta un nuevo recurso en la colección.
    async create(<%= resourceNameSingular %>) {
        return await this.getCollection().insertOne(<%= resourceNameSingular %>);
    }

    // update actualiza un recurso existente.
    async update(id, <%= resourceNameSingular %>) {
        return await this.getCollection().updateOne({ _id: new ObjectId(id) }, { $set: <%= resourceNameSingular %> });
    }

    // replace reemplaza un recurso existente.
    async replace(id, <%= resourceNameSingular %>) {
        return await this.getCollection().replaceOne({ _id: new ObjectId(id) }, <%= resourceNameSingular %>);
    }

    // delete elimina un recurso de la colección.
    async delete(id) {
        return await this.getCollection().deleteOne({ _id: new ObjectId(id) });
    }

    // getAll obtiene todos los recursos de la colección.
    async getAll() {
        return await this.getCollection().find({}).toArray();
    }

    // getOne obtiene un recurso por su ID.
    async getOne(id) {
        return await this.getCollection().findOne({ _id: new ObjectId(id) });
    }
}

// Exporta una única instancia del modelo.
export default new <%= resourceNamePascal %>Models();
